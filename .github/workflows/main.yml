name: Build and Deploy Spring Boot Docker App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest  # GitHub Action은 기본적으로 Ubuntu 환경에서 실행됨

    steps:
      # 1. Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Set up JDK (Java 17 설치)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. application-secret.yaml 생성
      - name: Generate application-secret.yaml with secrets
        run: echo "${{secrets.APPLICATION_SECRET_YAML}}" >> src/main/resources/application-secret.yaml

      # 4. gradlew wrapper에 실행 권한 부여
      - name: Add execute permission to gradlew
        run: chmod +x ./gradlew

      # 5. Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      # 6. Docker 빌드
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .

      # 7. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      # 8. Docker 이미지 푸시
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # 9. EC2에서 도커를 실행
      - name: Create pem key in github runner
        run: |
          echo "$EC2_SSH_KEY" >> ~/key.pem
          chmod 600 ~/key.pem
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      - name: Deploy Docker container on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/key.pem ubuntu@${{ secrets.EC2_IP }} "docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest"
#        &&
#        docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/backend:latest

